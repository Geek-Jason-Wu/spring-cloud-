        在微服务架构中，我们将系统拆分成了很多服务单元，各单元的应用间通过服务注册与订阅的方式互相依赖。
    由于每个单元都在不同的进程中运行，依赖通过远程调用的方式执行，这样就有可能因为网络原因或是依赖服务
    自身问题出现调用故障或延迟，而这些问题会直接导致调用方的对外服务也出现延迟，若此时调用方的请求不断
    增加，最后就会因等待出现故障的依赖方响应形成任务挤压，最终导致自身服务的瘫痪。
        举个栗子：  
            在电商网站中，我们可能会将系统拆分成用户、订单、库存、积分、评论等一系列服务单元。用户创建
        一个订单时，客户端将调用订单服务的创建订单接口，此时创建订单接口有会向库存服务来请求出货。此时
        若库存服务因自身处理逻辑等原因造成相应缓慢，会直接导致创建订单服务的线程被挂起，以等待库存申请
        服务的响应，在漫长的等待之后用户会因为请求库存失败而得到创建订单失败的结果。如果在高并发情况下
        因这些挂起的线程在等待库存服务的相应而未能释放，使得后续到来的创建订单请求被阻塞，最终导致订单
        服务也不可用。
        在微服务架构中，存在着那么多的服务单元，若一个单元出现故障，就很容易因依赖关系而引发故障的蔓延
    最终导致整个系统的瘫痪，这样的架构相较传统架构更加不稳定，为了解决这样的问题，产生了断路器保护机制。
    